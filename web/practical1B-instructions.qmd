---
title: "Practical 1B - microbiota data"
subtitle: "MSP microbiome workshop"
author: David Barnett
date: last-modified
format: html
keep-md: false
theme: 
  light: flatly
  dark: darkly
css: ../.css/instructions.css
embed-resources: true
code-block-border-left: true
code-block-bg: true
toc: true
toc-location: right
toc-depth: 4
toc-expand: 1
other-links:
  - text: "Workshop Overview"
    href: "https://david-barnett.github.io/MSP-microbiome-workshop"
    icon: "house"
    target: "_blank"
  - text: "posit.cloud workspace"
    href: "https://posit.cloud/spaces/646067"
    icon: "cloud"
    target: "_blank"
number-sections: true
number-depth: 3
fig-align: center
fig-dpi: 200
fig-width: 7.5
fig-height: 5
fig-responsive: true
code-tools: true
code-fold: false
code-link: true
lightbox: auto
link-external-icon: true
cache: true
---

## Intro

Now we're going to look at the microbiota data, from the same Papa et al. 2012 study on paediatric IBD patients and controls.

::: {.callout-note collapse="true"}
### A note on sequence data processing

These data have already been processed into a table: counts of how often each sequence occurs in each sample.

It started as huge fastq text files, full of As, Cs, Ts and Gs, but we will not practice sequence data processing today, because it takes quite a long time to run.

Nowadays, we do amplicon sequencing with Illumina MiSeq, HiSeq, or similar technologies, and denoise the output with DADA2 to produce ASV count tables.

The example data we will use today are older. The amplicons were sequenced with "454 pyrosequencing" and clustered into OTUs, but the core principles of analysis remain the same.

And as you will see later today, the same approaches can also be applied to taxonomic abundance tables obtained from shotgun metagenomic sequencing.
:::

First we're going to use the R skills we practised in part 1A to inspect this data.

::: {.callout-note collapse="true" appearance="simple"}
### SOLUTION: Click me?

-   In this practical, solution blocks like this are available...

-   But try and write code independently before looking at the answer!

-   Attempting to recall knowledge or solve problems is proven to enhance learning.

-   So don't look unless you're really stuck! üí™
:::

After that, we'll take a look at some specialist R packages for microbiome analysis.

## Learning goals üß†

-   Practice general R skills to inspect microbiota count data and taxonomy

-   Gain basic familiarity with specialist microbiome R packages: `phyloseq` and `microViz`

-   Learn to calculate, visualise, and interpret standard richness and diversity indices: Observed Richness and (Effective) Shannon diversity

## Load R packages üì¶

```{r}
library(readxl)
library(here)
library(tidyverse)
```

## Read and inspect data üîç

Read the metadata file from part 1A. We will read the RDS file `"all_metadata.rds"`

```{r}
meta <- read_rds(file = here("data/papa2012/processed/all_metadata.rds"))
```

Read the count table: this is stored as a TSV (tab-separated variables) formatted text file.

```{r}
counts <- read_tsv(file = here("data/papa2012/papa2012_OTU_count_table.txt"))
```

```{r}
counts
```

#### **Your first challenge:**

Read the taxonomy table stored in `"data/papa2012/papa2012_taxonomy_table.txt"`

Call the object `taxonomy`

::: {.callout-note collapse="true" appearance="simple"}
#### SOLUTION:

```{r}
taxonomy <- read_tsv(file = here("data/papa2012/papa2012_taxonomy_table.txt"))
```

```{r}
taxonomy
```
:::

### Taxonomy table

Now practice inspecting the taxonomy table by completing the following tasks:

::: panel-tabset
##### Task 1

Check how many distinct genera there are.

Tip: use `unique()` and `length()`

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

```{r}
taxonomy$Genus %>% unique() %>% length()
```
:::

##### Task 2

How many OTUs are there in each Phylum?

Tip: use `count()` or `table()`

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

```{r}
taxonomy %>% count(Phylum)
```

```{r}
taxonomy$Phylum %>% table(useNA = "ifany")
```
:::

##### Task 3

What genera are in the phylum Actinobacteria?

Tip: use `filter()`

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

```{r}
taxonomy %>% filter(Phylum == "Actinobacteria") %>% count(Genus, sort = TRUE)
```

Or for just their names:

```{r}
taxonomy %>% filter(Phylum == "Actinobacteria") %>% pull(Genus) %>% unique()
```
:::
:::

### OTU count table

First let's plot a histogram of OTU number 1.

```{r, fig.width=8, fig.height=2}
counts %>% ggplot(aes(OTU_00001)) + geom_histogram(bins = 50)
```

Looks like there are a lot of zeros!

```{r}
table(OTU00001_has_0_counts = counts$OTU_00001 == 0, useNA = "ifany")
```

------------------------------------------------------------------------

Attempt the following tasks to explore further!

::: panel-tabset
##### Task 1

Use `filter()` to plot only the non-zero entries for OTU 1.

Try also using `+ scale_x_log10()` to transform the plot axis scale.

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

```{r, fig.width=8, fig.height=2}
counts %>%
  filter(OTU_00001 != 0) %>%
  ggplot(aes(OTU_00001)) +
  geom_histogram(bins = 30) +
  scale_x_log10()
```
:::

##### Task 2

Use `mutate()` to create a temporary log-transformed variable `log_OTU1` and plot its distribution.

*Note that you can't do log(0), so you will need to add 1 to all values first, i.e.* `log10(OTU_00001 + 1)`

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

```{r, fig.width=8, fig.height=2}
counts %>%
  mutate(log_OTU1 = log10(OTU_00001 + 1)) %>%
  ggplot(aes(log_OTU1)) +
  geom_histogram(bins = 30)
```
:::

##### Task 3

Plot OTU 1 against OTU 2 as a scatter plot using `geom_point`.

Remember to add 1 before log10 transformation of both variables.

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

```{r, fig.width=4, fig.height=4}
#| out-width: "50%"
#| fig-align: "center"
counts %>%
  mutate(log_OTU1 = log10(OTU_00001 + 1)) %>%
  mutate(log_OTU2 = log10(OTU_00002 + 1)) %>%
  ggplot(aes(x = log_OTU1, y = log_OTU2)) +
  geom_point()
```
:::

##### Task 4

But what type of bacteria do these amplicon sequences belong to?

Look up the classifications of OTU 1 and OTU 2 in the taxonomy table.

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

```{r}
taxonomy %>% filter(OTU %in% c("OTU_00001", "OTU_00002"))
```

You could also select a subset of variables to look at:

```{r}
taxonomy %>%
  filter(OTU %in% c("OTU_00001", "OTU_00002")) %>%
  select(OTU, Phylum, Family, Genus) 
```
:::

##### Task 5?

Now make histograms and look up the taxonomy for the next thousand OTUs...

::: {.callout-note collapse="true" appearance="simple"}
##### SOLUTION:

Okay, that was a joke. ü§°

It is possible to make a thousand plots, because R is very good at repetitive tasks.

But, this would not be very useful, because you could not look at them all.

In the next section of this practical, we will explore smarter ways to analyse microbiota compositions.
:::
:::

------------------------------------------------------------------------

## Assemble a phyloseq üõ†Ô∏è

So far we have not used any R packages specialised for microbiome data.

Let's do so, because it will make our next tasks a lot easier!

```{r}
library(phyloseq)
library(microViz)
```

We will start by combining our three dataframes into one `phyloseq` object

### OTU counts + taxonomy

phyloseq uses row or column names to match OTUs across the count and taxonomy tables.

In addition, the taxonomy table must contain only taxonomic ranks in descending order, and the count table must be converted to a numeric matrix.

```{r}
count_matrix <- counts %>% select(-sample) %>% as.matrix()
rownames(count_matrix) <- counts$sample
```

```{r}
tax_matrix <- taxonomy %>% select(!OTU) %>% as.matrix()
rownames(tax_matrix) <- taxonomy$OTU
```

```{r}
ps <- phyloseq(
  otu_table(count_matrix, taxa_are_rows = FALSE), 
  tax_table(tax_matrix)
)
```

```{r}
ps
```

### Adding sample metadata

phyloseq uses row names to match samples (across the OTU count table and the sample metadata).

```{r}
head(sample_names(ps))
```

Notice that in the phyloseq object the sample names have underscores, but they have hyphens in the sample metadata.

```{r}
meta
```

We can fix that with the `stringr` package `str_replace` function.

```{r}
meta$sample <- meta$sample %>% str_replace(pattern = "-", replacement = "_")
meta
```

Now make them row names, check they all match, and add the metadata to the phyloseq object.

```{r}
meta_df <- as.data.frame(meta)
rownames(meta_df) <- meta$sample
all(rownames(meta_df) %in% sample_names(ps))
```

```{r}
sample_data(ps) <- meta_df
ps
```

## microViz ü¶†üëÅÔ∏è

microViz provides tools for working with phyloseq objects.

Let's take a look with some basic microViz functions.

```{r}
samdat_tbl(ps) # retrieve sample data as a tibble
```

```{r}
# get the OTU table, or part of it
otu_get(ps, taxa = 1:5, samples = c("132_AX", "166_AX", "102_AZ"))
```

```{r}
# get the taxonomy table
tt_get(ps) %>% head(3)
```

## Build some bar charts üìä

Sequencing data are compositional. The total number of reads per sample is mostly arbitrary, and so the counts should be interpreted as relative abundances instead of absolute abundances.

A simple way to visualise compositional data is as percentages, proportions of a whole.

Stacked bar charts are great for this: each bar represents one sample, and we can show the abundance data as proportions, after aggregating the counts by taxonomy.

```{r, message=FALSE}
#| fig-width: 8
#| fig-height: 2
ps %>% tax_fix() %>% comp_barplot("Phylum", n_taxa = 4, label = NULL)
```

This plot is aggregated into phyla, which is easy to read, and provides basic information.

We see that most samples contain a mixture of *Firmicutes* and *Bacteroidetes*, but some appear to be dominated by *Proteobacteria* instead.

::: {.callout-warning collapse="true"}
### Beware Fickle Phyla!

Beware, phylum names have changed recently!

-   *Actinobacteria* is now *Actinomycetota*
-   *Bacteroidetes* is now *Bacteroidota*
-   *Proteobacteria* is now *Pseudomonadota* (!)
-   *Firmicutes* is now *Bacillota* (!!)

In all prior research, you will see the original names, but in coming years, the new names will be increasingly adopted.

The best source for checking/searching official and alternative names is probably [LPSN at bacterio.net](https://www.bacterio.net/){target="_blank"}
:::

```{r, message=FALSE}
#| fig-width: 8
#| fig-height: 4
ps %>% tax_fix() %>% comp_barplot("Genus", n_taxa = 11, merge_other = F, label = NULL)
```

This plot is aggregated into genera, which provides more detail, but is harder to read, and we cannot give every genus a distinct colour.

We see that many samples contain a relatively large proportion of *Bacteroides* or *Faecalibacterium* but there is quite some further variation!

::: {.callout-note collapse="true"}
### `tax_fix()` ?

**Filling gaps in the taxonomy table**

-   You might have noticed that the taxonomy table has some `NA` values.
-   This often occurs when a sequence cannot be uniquely classified at the Genus level.
-   The short 16S amplicon sequenced may only allow a unique classification at Family rank, or above.

```{r}
tt_get(ps) %>% as.data.frame() %>% filter(is.na(Genus)) %>% head(3)
```

-   We need to fill those gaps! and we can do this with `tax_fix()`, which copies info down from a higher rank to fill the gaps.
-   It often works fine with default settings, but sometimes there are more complicated taxonomy table problems
-   To look at and fix the taxonomy table interactively, try `tax_fix_interactive(ps)` in the console
-   (You may need to allow popups on your browser!)

::: {.callout-warning collapse="false"}
### Press Stop!

Running `tax_fix_interactive(ps)` will open a new web browser tab.

If you don't see anything after running the command, you might need to unblock pop-ups!

When you are done looking, click the **red STOP üõë button in the R console**!
:::

Let's update our `ps` phyloseq object with the default fix.

```{r}
ps <- tax_fix(ps)
```

Check the first few taxa now look correct?
:::

## Discover diversity üå≥üå≤üå¥

As a last task for this introductory session, we will calculate and visualise alpha diversity.

::: {.callout-note collapse="true"}
### Why is diversity interesting?

#### Biologically

-   Higher diversity ecosystems are probably more resilient to perturbations
-   Lower gut microbiota diversity sometimes accompanies various health problems (in adults)
-   BUT: `diverse == healthy` is not `TRUE` for all ecosystems (e.g. early infant gut microbiome)
-   So, consider your own data and diversity hypotheses carefully

#### Practically

-   Diversity indices provide a simple "one number" summary of each ecosystem
-   This makes it relatively easy to compare samples, and do statistical testing
:::

### Observed richness

-   The simplest richness measure is just counting, a.k.a. "Observed Richness".
-   Let's compute the observed richness of genera.
-   `ps_calc_richness()` computes the index for each sample and adds it to your sample_data

```{r}
ps_alpha <- ps %>%
  ps_calc_richness(rank = "Genus", index = "observed", varname = "N_genera")
```

### Shannon diversity

Next we will calculate the Shannon diversity index at the level of Genus.

-   The Shannon index is a commonly used diversity measure, with this formula: $H = -\sum_{i=1}^Np_i\ln p_i$
-   Shannon index is often is denoted with $H$, and here $p_i$ denotes the proportional abundance of the $i$'th of $N$ taxa in the sample.

::: {.callout-note collapse="true"}
#### Explanation of the Shannon index formula

-   For each taxon $i$, you multiply its proportional abundance $p_i$ by the natural log of that proportion $\ln p_i$, and sum those values.
-   Try it out for yourself to convince yourself you get larger (negative) values for higher proportions.
-   The highest value you can achieve with $N$ taxa occurs with equal proportions (e.g. with 20 taxa, maximum diversity occurs if each has a relative abundance of 5%, i.e. 0.05)
-   Lastly, you change the sign of the result to a positive number, for ease of interpretation (this just makes more intuitive sense: as higher positive numbers indicates higher diversity.)
:::

We will also compute an exponentiated version, the effective number of genera, or effective Shannon index.

::: {.callout-note collapse="true"}
#### Explanation of the **Effective** Shannon Diversity

The exponent of the Shannon index $e^H$ represents the number of taxa (genera) that would be present in an evenly abundant ecosystem with the same Shannon index.

-   The numeric value of the Shannon index itself has no intuitive meaning.
-   You can compare them, but can't easily interpret any one number.
-   So, the concept of "effective numbers" of taxa is useful here.
-   If your original ecosystem was actually perfectly even, then $e^H = N$
-   Where N is the observed richness
-   The more uneven an ecosystem, the further $e^H$ will be from $N$
:::

```{r}
ps_alpha <- ps_alpha %>% 
  ps_calc_diversity(index = "shannon", rank = "Genus", varname = "Shannon_Genus") %>% 
  ps_mutate(Effective_Shannon_Genus = exp(Shannon_Genus))

ps_alpha
```

The new genus-level Shannon diversity variables are stored in the sample data slot of `ps_alpha`

```{r}
ps_alpha %>% samdat_tbl() %>% select(sample, Shannon_Genus, Effective_Shannon_Genus)
```

### Diversity Distributions

First we will plot simple histograms of the richness and diversity values we observe.\
Notice the different range of values for each one.

::: panel-tabset
##### Observed Richness

```{r, fig.width=6, out.width="70%"}
ps_alpha %>% samdat_tbl() %>% pull(N_genera) %>% hist(main = "Observed Richness, Genus")
```

##### Shannon $H$

```{r, fig.width=6, out.width="70%"}
ps_alpha %>% samdat_tbl() %>% pull(Shannon_Genus) %>% hist(main = "Shannon Diversity, Genus")
```

##### Effective Shannon $e^H$

```{r, fig.width=6, out.width="70%"}
ps_alpha %>% samdat_tbl() %>% pull(Effective_Shannon_Genus) %>% hist(main = "Effective Number of Genera")
```
:::

### Interpreting diversity

::: panel-tabset
#### **Observed Richness:** Number of Genera

Each sample is sorted and labelled by the observed richness of genera

Can you spot samples with equal richness but clear differences in evenness?

```{r, message=FALSE, fig.height=11, fig.width=6, out.width="70%"}
#| fig-align: "center"
#| code-fold: true
ps_alpha %>% 
  ps_arrange(N_genera) %>% 
  comp_barplot(
    tax_level = "Genus", n_taxa = 19, merge_other = FALSE, 
    sample_order = "asis", label = "N_genera"
  ) +
  coord_flip()
```

Don't forget to look at the other tab, where the bars are labelled by their diversity!

#### **Diversity:** Shannon Effective Number of Genera

Now each sample is labelled with the effective Shannon diversity of genera ($e^H$)

Do you see the general relationship of $e^H$ with sample composition?

```{r, message=FALSE, fig.height=11, fig.width=6, out.width="70%"}
#| fig-align: "center"
#| code-fold: true
ps_alpha %>% 
  ps_arrange(Effective_Shannon_Genus) %>% 
  ps_mutate(short_shannon = formatC(Effective_Shannon_Genus, digits = 1, format = "f")) %>% 
  comp_barplot(
    tax_level = "Genus", n_taxa = 19, merge_other = FALSE, 
    sample_order = "asis", label = "short_shannon"
  ) +
  coord_flip()
```
:::

## Save our phyloseq

We have assembled a phyloseq object and calculated richness and diversity measures.

Let's store the result of this processing, by writing the phyloseq object to a file.

We can use the `saveRDS()` function to do this.

```{r}
saveRDS(ps_alpha, file = here("data", "papa2012", "processed", "papa12_phyloseq.rds"))
```

```{r}
#| include: false
dir.create(here("data", "papa2012", "processed", "backup"))
saveRDS(ps_alpha, file = here("data", "papa2012", "processed", "backup", "papa12_phyloseq.rds"))
```

## Next! ‚è©

-   Its time to stop exploring and take a break.
-   In the next lecture you will learn more about the main approaches for microbiota data analysis.
-   In the next practical session, we will come back to these data with a plan, an analysis plan!
-   Click here: <https://david-barnett.github.io/MSP-microbiome-workshop/practical-2/web/practical2-instructions.html>

## Session info

<details>

```{r}
sessioninfo::session_info()
```

</details>
